#!/usr/bin/python3
import gi
import getpass
import subprocess
import os
import set
import count

gi.require_version("Gtk", "3.0")
gi.require_version('AppIndicator3', '0.1')
from gi.repository import Gtk, Gio
from datetime import date, datetime


class Application:
        
    def __init__(self):
        self.builder = Gtk.Builder()
        self.builder.add_from_file("/usr/share/hamonikr/pcchecker/pcchecker.glade")
        self.builder.connect_signals(self)

        window = self.builder.get_object("window")
        window.set_title("hamonikr-pcchecker")
        
        window.show_all()
        
        os_name = self.fnt_command_return_word("lsb_release -i", 'ID:\t', '\n')
        os_ver = self.fnt_command_return_word("lsb_release -r", 'Release:\t', '\n')
        os_info = os_name + " " + os_ver
        kernel_ver = self.fnt_command_return_word("uname -r", False, '\n')
        cpu_name = self.fnt_command_return_word("lscpu | grep 'Model name:'", 'Model name:', '\n')
        cpu_cnt = subprocess.check_output("nproc", shell=True).decode().strip()
        memory_name = subprocess.check_output("free -h | grep 'Mem:'", shell=True).decode()
        memory_name = memory_name.split('Mem:')[1].strip().split(' ')[0]
        disk_val = self.fnt_command_return_word(
            "df -P | grep -v ^Filesystem | awk '{sum += $2} END { print sum/1024/1024 }'", False, '\n')
        disk_val = str(round(float(disk_val), 1))
        graphic_val = self.fnt_command_return_word("lspci | grep -i VGA", 'controller: ', '\n')
        uuid_val = self.fnt_command_return_word("sudo blkid | grep UUID", 'UUID="', '"')
        
        self.builder.get_object("label7").set_markup("<span font='13'><b>제품 번호</b></span> : <span>"+uuid_val+"</span>")
        self.builder.get_object("label2").set_markup("<span font='13' ><b>운영체제</b></span> : <span>"+os_info+"</span>")
        self.builder.get_object("label3").set_markup("<span font='13'><b>메모리</b></span> : <span>"+memory_name+"</span>")
        self.builder.get_object("label4").set_markup("<span font='13'><b>하드 드라이브</b></span> : <span>"+disk_val+"GB</span>")
        # self.builder.get_object("label4").set_text("메모리 : "+memory_name)
        # self.builder.get_object("label5").set_text("하드 드라이브 : "+disk_val)
        # self.builder.get_object("label6").set_text("그래픽 카드 : "+graphic_val)
        # self.builder.get_object("label8").set_text("단말 제품 번호 : "+uuid_val)
        # self.builder.get_object("label3").set_text("리눅스 커널 : "+kernel_ver)
        # self.builder.get_object("label4").set_text("프로세서 : "+cpu_name + " X " + cpu_cnt)
        # if os_name == "Hamonikr":
        #     # cinnamon info
        #     cinnamon_ver = self.fnt_command_return_word("cinnamon --version", 'Cinnamon ', '\n')
        #     self.builder.get_object("label9").set_text("시나몬 버전 : "+cinnamon_ver)

        (pw_status, pw_past) = set.set_password()
        osname = self.fnt_command_return_word("lsb_release -i", 'ID:\t', '\n')
        (update_status, update_info) = set.set_update(osname)
        (self.lbl_ufw_status, self.lbl_ufw_info, self.switch_ufw, ufw_status, ufw_info) = set.set_ufw()
        (self.lbl_ts_status, self.lbl_ts_info, ts_status, ts_info) = set.set_backup()
        (total_score_text, total_status_text, total_info_text) = count.set_score()
        self.builder.get_object("exlabel1").set_markup("<b>비밀번호</b>                                                                                                                     " + pw_status)
        self.builder.get_object("exlabel2").set_markup("<b>업그레이드</b>                                                                                                                 " + update_status)
        self.builder.get_object("exlabel3").set_markup("<b>방화벽</b>                                                                                                                         " + ufw_status)
        self.builder.get_object("exlabel4").set_markup("<b>백업</b>                                                                                                                             " + ts_status)
        self.builder.get_object("exlabel11").set_markup(pw_past)
        self.builder.get_object("exlabel22").set_markup(update_info)
        self.builder.get_object("exlabel33").set_markup(ufw_info)
        self.builder.get_object("exlabel44").set_markup(ts_info)
        self.builder.get_object("label31").set_markup(total_status_text)
        self.builder.get_object("label41").set_markup(total_info_text)
        self.builder.get_object("label42").set_markup(total_score_text)
        self.builder.get_object("button1").connect("clicked", self.fnt_set_score)
        self.builder.get_object("button3").connect("clicked",self.open_cinnamon_info)
        self.builder.get_object("button4").connect("clicked",self.fnt_open_user)
        self.builder.get_object("button4").connect("released",self.fnt_close_user)
        self.builder.get_object("button5").connect("clicked",self.fnt_open_updatemanager)
        self.builder.get_object("button6").connect("clicked",self.fnt_open_ufw)
        self.builder.get_object("button6").connect("released",self.fnt_close_ufw)
        self.builder.get_object("button7").connect("clicked",self.fnt_open_timeshift)
        self.builder.get_object("button7").connect("released",self.fnt_close_timeshift)
        
    # change subprocess.call result to split words
    def fnt_command_return_word(self, command, split1, split2):
        if False == split1:
            result = subprocess.check_output(command, shell=True).decode().split(split2)[0]
        elif False == split2:
            result = subprocess.check_output(command, shell=True).decode().split(split1)[1]
        else:
            result = subprocess.check_output(command, shell=True).decode().split(split1)[1].split(split2)[0]
        return result.strip()
    
    def fnt_set_score(self, widget):
        (total_score_text, total_status_text, total_info_text) = count.set_score()      # count score
        self.builder.get_object("label31").set_markup(total_status_text)
        self.builder.get_object("label41").set_markup(total_info_text)
        self.builder.get_object("label42").set_markup(total_score_text)
        
    def open_cinnamon_info(self,widget):
        subprocess.call('cinnamon-settings info', shell=True)
        # os.system("cinnamon-settings info")
        
    # open cinnamon-settings/user-accounts window when password setting button clicked
    def fnt_open_user(self, widget):
        # self.logger("Open user - pw")
        osname = self.fnt_command_return_word("lsb_release -i", 'ID:\t', '\n')
        # for Hamonikr users
        if osname == "Hamonikr":
            subprocess.call('su $PCCHECKER_USER -c "cinnamon-settings user"', shell=True)
        # for GooroomOS and TmaxOS users
        else :
            subprocess.call('XDG_CURRENT_DESKTOP=GNOME gnome-control-center user-accounts', shell=True)
            
    def fnt_close_user(self,widget):
        # self.logger("Close user - pw")
        (pw_status, pw_past) = set.set_password()       # search password info
        self.builder.get_object("exlabel1").set_markup("<b>비밀번호</b>                                                                                                                     " + pw_status)
        self.builder.get_object("exlabel11").set_markup(pw_past)
    
    # open minupdate/gooroom-update-launcher/gnome-control-center window when update setting button clicked
    def fnt_open_updatemanager(self, widget):
        # self.logger("Open update manager")
        osname = self.fnt_command_return_word("lsb_release -i", 'ID:\t', '\n')
        if osname == "Hamonikr":
            subprocess.call('mintupdate', shell=True)
        elif osname == "Gooroom":
            subprocess.call('gooroom-update-launcher', shell=True)
        elif osname == "Tmaxos":
            subprocess.call('XDG_CURRENT_DESKTOP=GNOME gnome-control-center info-overview', shell=True)
        # self.fupdate_flag = 1
        # self.lbl_update_info.set_markup("오른쪽 <b>새로고침</b> 버튼을 클릭해 정보를 다시 불러와 주세요.")
        # self.img_up.set_from_file("/usr/share/icons/hicolor/256x256/apps/pc_upgrade_refresh.png")
        # self.btn_fupdate.add(self.img_up)
        # self.btn_fupdate.set_tooltip_text("업데이트 상태를 다시 점검합니다.")
        
    def fnt_close_updatemanager(self, widget):
        # self.logger("Close user - pw")
        osname = self.fnt_command_return_word("lsb_release -i", 'ID:\t', '\n')
        (update_status, update_info) = set.set_update(osname)       # search password info
        self.builder.get_object("exlabel2").set_markup("<b>업그레이드</b>                                                                                                                 " + update_status)
        self.builder.get_object("exlabel22").set_markup(pw_past)
        
    # open gufw window when ufw setting button is clicked
    def fnt_open_ufw(self, widget):
        # self.logger("Open ufw")
        subprocess.call('sudo gufw', shell=True)
        
    # reload ufw info when ufw setting window is closed
    def fnt_close_ufw(self, widget):
        # self.logger("Close ufw")
        (lbl_ufw_status,lbl_ufw_info, switch_ufw, ufw_status, ufw_info) = set.set_ufw()     # search ufw info
        # set ufw gui
        self.builder.get_object("exlabel3").set_markup("<b>방화벽</b>                                                                                                                         " + ufw_status)
        self.builder.get_object("exlabel33").set_markup(ufw_info)
        
    # open timeshift-gtk window when backup setting button is clicked
    def fnt_open_timeshift(self, widget):
        # self.logger("Open timeshft")
        subprocess.call('sudo timeshift-gtk', shell=True)
        
    # reload backup info when backup setting window is closed
    def fnt_close_timeshift(self,widget):
        # self.logger("Close timeshft")
        (lbl_ts_status, lbl_ts_info, ts_status, ts_info) = set.set_backup()     # search backup info
        # set backup gui
        self.builder.get_object("exlabel4").set_markup("<b>백업</b>                                                                                                                             " + ts_status)
        self.builder.get_object("exlabel44").set_markup(ts_info)
        
    # run the application
    def run(self):
        # self.builder = Gtk.Builder()
        # self.builder.add_from_file("/home/eden/test3.glade")
        # self.builder.connect_signals(self)

        # window = self.builder.get_object("window")
        # window.set_title("hamonikr-pcchecker")
        
        # window.show_all()

        Gtk.main()
# ensure that user has manager access
if 'root' != getpass.getuser():
    subprocess.call(
        'zenity --error --no-wrap --height=150 --width=250 --title "실행권한 오류" --text="관리자 권한으로 실행해 주시기 바랍니다."',
        shell=True)
else:
    Application().run()